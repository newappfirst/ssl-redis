SSL-Redis
-----------------------
This project is a fork of the 2.4.15 stable version of Redis by antirez to enable native
SSL communications with clients and slaves. 

If you want to use ssl-redis from PHP, I suggest you use my fork of nicholasfs' phpredis called ssl-phpredis

Changes in this fork are copyright 2012 Triton Digital Media, and 
released to the public domain as open source under the BSD license. 
All other portions of this codebase remain copyright Salvatore Sanfilippo and
other contributors, as listed in the code.

The original source is: https://github.com/antirez/redis/tree/2.4
The home website fo redis is: http://redis.io/

This fork is no longer being maintained. For updates, including an in-progress update of 2.6 please see https://github.com/bbroerman30/ssl-redis

This is a work-in-progress. I will be making updates as I test, find bugs, or other issues.
If you find bugs, or have isues, please contact me at bbroerman@tritonmedia.com


To enable SSL on redis-server, add these lines to the redis.config:
ssl true
ssl_ca_root_dir < Path to your openSSL root certificates directory >
ssl_ca_root_file < Path to your openSSL root certificate file (You must specify either a root CA file, or a directory, but not both) >
ssl_cert_file <Path to your server's SSL cert>
ssl_pk_file <Path to your server's private key file (may be the same as above)>
ssl_dhk_file <Path to your Diffie-Hellman data file>
ssl_cert_pass <password for cert file, PK file, etc> 

If you will be using slave servers, and want them to validate the common name in the certificate of the master server, you can add the option:
ssl_cert_common_name <common name to match>



To enable SSL on redis-client:
./redis-cli -h <optional host> -p <optional port> -ssl 

to specify a Root Certificate Authority file or directory, you should use:
    -cadir  <optional path to the openSSL root certificate directory>
    -cafile <optional path to the openSSL root certificate file>
    
You should specify a file, or a path, but not both. If neither are specified, it will default to the directory /etc/ssl/certs


Where to find complete Redis documentation?
-------------------------------------------

This README is just a fast "quick start" document. You can find more detailed
documentation at http://redis.io

Building Redis
--------------

It is as simple as:

    % make

You can run a 32 bit Redis binary using:

    % make 32bit

After building Redis is a good idea to test it, using:

    % make test

NOTE: if after building Redis with a 32 bit target you need to rebuild it
      with a 64 bit target you need to perform a "make clean" in the root
      directory of the Redis distribution.

Allocator
---------

By default Redis compiles and links against jemalloc under Linux, since
glibc malloc() has memory fragmentation problems.

To force a libc malloc() build use:

    % make FORCE_LIBC_MALLOC=yes

In all the other non Linux systems the libc malloc() is used by default.

On Mac OS X you can force a jemalloc based build using the following:

    % make USE_JEMALLOC=yes

Verbose build
-------------

Redis will build with a user friendly colorized output by default.
If you want to see a more verbose output use the following:

    % make V=1

Running Redis
-------------

To run Redis with the default configuration just type:

    % cd src
    % ./redis-server
    
If you want to provide your redis.conf, you have to run it using an additional
parameter (the path of the configuration file):

    % cd src
    % ./redis-server /path/to/redis.conf

Playing with Redis
------------------

You can use redis-cli to play with Redis. Start a redis-server instance,
then in another terminal try the following:

    % cd src
    % ./redis-cli
    redis> ping
    PONG
    redis> set foo bar
    OK
    redis> get foo
    "bar"
    redis> incr mycounter
    (integer) 1
    redis> incr mycounter
    (integer) 2
    redis> 

You can find the list of all the available commands here:

    http://redis.io/commands

Installing Redis
-----------------

In order to install Redis binaries into /usr/local/bin just use:

    % make install

You can use "make PREFIX=/some/other/directory install" if you wish to use a
different destination.

Make install will just install binaries in your system, but will not configure
init scripts and configuration files in the appropriate place. This is not
needed if you want just to play a bit with Redis, but if you are installing
it the proper way for a production system, we have a script doing this
for Ubuntu and Debian systems:

    % cd utils
    % ./install_server

The script will ask you a few questions and will setup everything you need
to run Redis properly as a background daemon that will start again on
system reboots.

You'll be able to stop and start Redis using the script named
/etc/init.d/redis_<portnumber>, for instance /etc/init.d/redis_6379.

Enjoy!
